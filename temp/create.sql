SET FOREIGN_KEY_CHECKS = 0;
DROP TABLE IF EXISTS COMMON;
DROP TABLE IF EXISTS COMMON_CODE;
DROP TABLE IF EXISTS TERMS;
DROP TABLE IF EXISTS NOTICE;
DROP TABLE IF EXISTS QNA;
DROP TABLE IF EXISTS FAQ;
DROP TABLE IF EXISTS RESERVATION;
DROP TABLE IF EXISTS SEAT;
DROP TABLE IF EXISTS THEATER;
DROP TABLE IF EXISTS RUN_SCHEDULE;
DROP TABLE IF EXISTS WATCH_HISTORY;
DROP TABLE IF EXISTS CREDIT_CARD;
DROP TABLE IF EXISTS ORDER_HISTORY;
DROP TABLE IF EXISTS MOVIE;
DROP TABLE IF EXISTS GENRE;
DROP TABLE IF EXISTS CREATOR;
DROP TABLE IF EXISTS VOD;;
DROP TABLE IF EXISTS MEMBERS;
SET FOREIGN_KEY_CHECKS = 1;

CREATE TABLE COMMON(
COMMON_ID INT AUTO_INCREMENT PRIMARY KEY,
COMMON_CODE VARCHAR(50) UNIQUE NOT NULL,
COMMON_CODE_CREATE_DATE DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE COMMON_CODE(
COMMON_CODE_ID INT AUTO_INCREMENT PRIMARY KEY,
COMMON_ID INT,
COMMON_CODE VARCHAR(50) NOT NULL,
COMMON_NAME VARCHAR(100) NOT NULL,
COMMON_VALUE VARCHAR(50) NOT NULL,
CREATE_DATE DATETIME DEFAULT CURRENT_TIMESTAMP,
CONSTRAINT COMMON_CODE_FK FOREIGN KEY (COMMON_CODE) REFERENCES COMMON(COMMON_CODE)
ON DELETE CASCADE,
CONSTRAINT COMMON_ID_FK FOREIGN KEY (COMMON_ID) REFERENCES COMMON(COMMON_ID)
ON DELETE CASCADE,

INDEX idx_common_value (COMMON_VALUE)
);

CREATE TABLE TERMS(
TERMS_CODE VARCHAR(8) PRIMARY KEY,
TERMS_TITLE VARCHAR(300) NOT NULL,
TERMS_CONTENT VARCHAR(500) NOT NULL,
TERMS_REQUIRED VARCHAR(1) NOT NULL,
TERMS_TPCD VARCHAR(50) NOT NULL,
CREATION_DATE DATETIME DEFAULT CURRENT_TIMESTAMP,

CONSTRAINT TERMS_TPCD_FK FOREIGN KEY (TERMS_TPCD) REFERENCES COMMON_CODE(COMMON_VALUE)
);
CREATE TABLE MEMBERS(
USER_ID VARCHAR(20) PRIMARY KEY,
PASSWD VARCHAR(60) NOT NULL,
USER_NAME VARCHAR(10) NOT NULL,
EMAIL VARCHAR(50) UNIQUE,
TEL VARCHAR(11) UNIQUE,
AGE TINYINT UNSIGNED DEFAULT 0,
SIGNUP_DATE DATE NOT NULL DEFAULT (CURRENT_DATE),
TOKEN VARCHAR(30),
TOKEN_VALIDITY DATETIME,
LANG_TPCD VARCHAR(50),
DATE_TPCD VARCHAR(50),
VIEW_ADULT CHAR(1) NOT NULL DEFAULT 'N',
SAVE_HISTORY CHAR(1) NOT NULL DEFAULT 'Y',
TERMS VARCHAR(5) NOT NULL,
USER_TPCD VARCHAR(50), 

CONSTRAINT LANG_TPCD_FK FOREIGN KEY (LANG_TPCD) REFERENCES COMMON_CODE(COMMON_VALUE),
CONSTRAINT DATE_TPCD_FK FOREIGN KEY (DATE_TPCD) REFERENCES COMMON_CODE(COMMON_VALUE),
CONSTRAINT USER_TPCD_FK FOREIGN KEY (USER_TPCD) REFERENCES COMMON_CODE(COMMON_VALUE)
);

CREATE TABLE GENRE(
GENRE_CODE VARCHAR(8) PRIMARY KEY,
GENRE_NAME VARCHAR(50) NOT NULL
);

CREATE TABLE CREATOR(
CREATOR_CODE VARCHAR(8) PRIMARY KEY,
CREATOR_NAME VARCHAR(20) NOT NULL,
GENDER VARCHAR(2),
BIRTH DATE,
HOMETOWN VARCHAR(20)
);

CREATE TABLE MOVIE(
MOVIE_CODE VARCHAR(8) PRIMARY KEY,
GENRE_CODEA VARCHAR(8) NOT NULL,
GENRE_CODEB VARCHAR(8),
GENRE_CODEC VARCHAR(8),
MOVIE_NAME VARCHAR(100) NOT NULL,
DIRECT_CODEA VARCHAR(8) NOT NULL,
DIRECT_CODEB VARCHAR(8),
ACTOR_CODEA VARCHAR(8) NOT NULL,
ACTOR_CODEB VARCHAR(8),
ACTOR_CODEC VARCHAR(8),
ACTOR_CODED VARCHAR(8),
ACTOR_CODEE VARCHAR(8),
SYNOPSIS VARCHAR(300),
RUNTIME TIME NOT NULL,
RATING_TPCD VARCHAR(50) NOT NULL,
MOVIE_RELEASE DATE,
TEASER VARCHAR(300),
POSTER VARCHAR(300),
SALES BIGINT,

CONSTRAINT GENRE_CODEA_FK FOREIGN KEY (GENRE_CODEA) REFERENCES GENRE(GENRE_CODE),
CONSTRAINT GENRE_CODEB_FK FOREIGN KEY (GENRE_CODEB) REFERENCES GENRE(GENRE_CODE),
CONSTRAINT GENRE_CODEC_FK FOREIGN KEY (GENRE_CODEC) REFERENCES GENRE(GENRE_CODE),

CONSTRAINT DIRECT_CODEA_FK FOREIGN KEY (DIRECT_CODEA) REFERENCES CREATOR(CREATOR_CODE),
CONSTRAINT DIRECT_CODEB_FK FOREIGN KEY (DIRECT_CODEB) REFERENCES CREATOR(CREATOR_CODE),

CONSTRAINT ACTOR_CODEA_FK FOREIGN KEY (ACTOR_CODEA) REFERENCES CREATOR(CREATOR_CODE),
CONSTRAINT ACTOR_CODEB_FK FOREIGN KEY (ACTOR_CODEB) REFERENCES CREATOR(CREATOR_CODE),
CONSTRAINT ACTOR_CODEC_FK FOREIGN KEY (ACTOR_CODEC) REFERENCES CREATOR(CREATOR_CODE),
CONSTRAINT ACTOR_CODED_FK FOREIGN KEY (ACTOR_CODED) REFERENCES CREATOR(CREATOR_CODE),
CONSTRAINT ACTOR_CODEE_FK FOREIGN KEY (ACTOR_CODEE) REFERENCES CREATOR(CREATOR_CODE),

CONSTRAINT RATING_FK FOREIGN KEY (RATING_TPCD) REFERENCES COMMON_CODE(COMMON_VALUE)
);

CREATE TABLE VOD(
MOVIE_CODE VARCHAR(8) PRIMARY KEY,
PRICE MEDIUMINT UNSIGNED NOT NULL,
START_DATE DATE NOT NULL,
END_DATE DATE NOT NULL,
SERVICE_ACTIVE CHAR(1) NOT NULL DEFAULT 'N',
DISCOUNT TINYINT NOT NULL DEFAULT 0,

CONSTRAINT VOD_MOVIECODE_FK FOREIGN KEY (MOVIE_CODE) REFERENCES MOVIE(MOVIE_CODE)
);

CREATE TABLE THEATER(
THEATER_CODE VARCHAR(8) PRIMARY KEY,
THEATER_NAME VARCHAR(20) NOT NULL,
THEATER_ACTIVE CHAR(1) NOT NULL DEFAULT 'N',
TOTALSEAT MEDIUMINT UNSIGNED NOT NULL DEFAULT 0
);

CREATE TABLE RUN_SCHEDULE(
SCHEDULE_CODE VARCHAR(8) PRIMARY KEY,
THEATER_CODE VARCHAR(8) NOT NULL,
MOVIE_CODE VARCHAR(8) NOT NULL,
RUN_DATE DATE NOT NULL,
START_TIME TIME,
END_TIME TIME,

CONSTRAINT RUN_THEATERCODE_FK FOREIGN KEY (THEATER_CODE) REFERENCES THEATER(THEATER_CODE),
CONSTRAINT RUN_MOVIECODE_FK FOREIGN KEY (MOVIE_CODE) REFERENCES MOVIE(MOVIE_CODE)
);

CREATE TABLE SEAT(
SEAT_CODE VARCHAR(8),
THEATER_CODE VARCHAR(8),
PRICE MEDIUMINT UNSIGNED NOT NULL DEFAULT 0,
DISCOUNT_PER TINYINT NOT NULL DEFAULT 0,
SEAT_ACTIVE CHAR(1) NOT NULL DEFAULT 'N',
RESERVED CHAR(1) NOT NULL DEFAULT 'N',

CONSTRAINT SEAT_PK PRIMARY KEY(SEAT_CODE, THEATER_CODE),

CONSTRAINT SEAT_THEATERCODE_FK FOREIGN KEY (THEATER_CODE) REFERENCES THEATER(THEATER_CODE)
);

CREATE TABLE RESERVATION(
RESERVE_CODE VARCHAR(8) PRIMARY KEY,
RESERVE_DATE DATE NOT NULL,
USER_ID VARCHAR(20),
THEATER_CODE VARCHAR(8),
MOVIE_CODE VARCHAR(8),
SEAT_CODE VARCHAR(8),
PRICE MEDIUMINT UNSIGNED NOT NULL,

CONSTRAINT RESERVE_USERID_FK FOREIGN KEY (USER_ID) REFERENCES MEMBERS(USER_ID),
CONSTRAINT RESERVE_THEATERCODE_FK FOREIGN KEY (THEATER_CODE) REFERENCES THEATER(THEATER_CODE),
CONSTRAINT RESERVE_MOVIECODE_FK FOREIGN KEY (MOVIE_CODE) REFERENCES MOVIE(MOVIE_CODE),
CONSTRAINT RESERVE_SEATCODE_FK FOREIGN KEY (SEAT_CODE) REFERENCES SEAT(SEAT_CODE)

);

CREATE TABLE WATCH_HISTORY(
USER_ID VARCHAR(20),
MOVIE_CODE VARCHAR(8),
WATCH_DATE DATE,
WATCH_TIME TIME,

CONSTRAINT WATCH_HISTORY_PK PRIMARY KEY(USER_ID, MOVIE_CODE),

CONSTRAINT WATCH_HISTORY_USERID_FK FOREIGN KEY (USER_ID) REFERENCES MEMBERS(USER_ID),
CONSTRAINT WATCH_HISTORY_MOVIECODE_FK FOREIGN KEY (MOVIE_CODE) REFERENCES MOVIE(MOVIE_CODE)
);

CREATE TABLE CREDIT_CARD(
CARD_NUM VARCHAR(20) PRIMARY KEY,
USER_ID VARCHAR(20),
EXP_MONTH CHAR(6) NOT NULL,
CVC VARCHAR(7) NOT NULL,
BANK_CODE VARCHAR(8) NOT NULL,

CONSTRAINT CREDIT_CARD_USERID_FK FOREIGN KEY (USER_ID) REFERENCES MEMBERS(USER_ID)
);

CREATE TABLE ORDER_HISTORY(
ORDER_CODE VARCHAR(8) PRIMARY KEY,
USER_ID VARCHAR(20),
MOVIE_CODE VARCHAR(8),
PRICE MEDIUMINT UNSIGNED NOT NULL,
ORDER_DATE DATE NOT NULL,
CARD_NUM VARCHAR(20),

CONSTRAINT ORDER_HISTORY_USERID_FK FOREIGN KEY (USER_ID) REFERENCES MEMBERS(USER_ID),
CONSTRAINT ORDER_HISTORY_MOVIECODE_FK FOREIGN KEY (MOVIE_CODE) REFERENCES MOVIE(MOVIE_CODE),
CONSTRAINT CARD_NUM_FK FOREIGN KEY (CARD_NUM) REFERENCES CREDIT_CARD(CARD_NUM)
);

CREATE TABLE NOTICE(
NOTICE_CODE VARCHAR(8) PRIMARY KEY,
CATEGORY VARCHAR(8),
WRITE_DATE DATE NOT NULL,
TITLE VARCHAR(100) NOT NULL,
CONTENT VARCHAR(500) NOT NULL,
WRITER VARCHAR(20) NOT NULL,

CONSTRAINT WRITER_FK FOREIGN KEY (WRITER) REFERENCES MEMBERS(USER_ID)
);

CREATE TABLE FAQ(
FAQ_CODE VARCHAR(8) PRIMARY KEY,
QUESTION VARCHAR(300) NOT NULL,
ANSWER VARCHAR(500) NOT NULL
);

CREATE TABLE QNA(
QNA_CODE VARCHAR(8) PRIMARY KEY,
TITLE VARCHAR(300) NOT NULL,
CONTENT VARCHAR(500) NOT NULL,
USER_ID VARCHAR(20),
WRITE_DATE DATE NOT NULL,
REPLY VARCHAR(500),

CONSTRAINT QNA_USERID_FK FOREIGN KEY (USER_ID) REFERENCES MEMBERS(USER_ID)
);