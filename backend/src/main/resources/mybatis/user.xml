<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.project.repository.UserMapper">

    <!-- 로그인 시 사용자 정보 조회 -->
    <select id="getUser" resultType="com.project.model.UserDto">
        SELECT
            m.USER_ID,
            m.PASSWD,
            m.USER_NAME,
            m.EMAIL,
            m.TEL,
            m.AGE,
            m.SIGNUP_DATE,
            m.TOKEN,
            m.TOKEN_VALIDITY,
            m.VIEW_ADULT,
            m.SAVE_HISTORY,
            m.TERMS,
            m.USER_TPCD,
            c1.COMMON_NAME AS USER_TPCD_NAME,
            m.LANG_TPCD,
            c2.COMMON_NAME AS LANG_TPCD_NAME,
            m.DATE_TPCD,
            c3.COMMON_NAME AS DATE_TPCD_NAME
        FROM MEMBERS m
        LEFT JOIN COMMON_CODE c1 ON m.USER_TPCD = c1.COMMON_VALUE AND c1.COMMON_CODE = 'USER_TPCD'
        LEFT JOIN COMMON_CODE c2 ON m.LANG_TPCD = c2.COMMON_VALUE AND c2.COMMON_CODE = 'LANG_TPCD'
        LEFT JOIN COMMON_CODE c3 ON m.DATE_TPCD = c3.COMMON_VALUE AND c3.COMMON_CODE = 'DATE_TPCD'
        WHERE 1=1
        <if test="userId != null and passwd != null">
            AND m.USER_ID = #{userId}
            AND m.PASSWD = #{passwd}
        </if>
        <if test="userId != null and (passwd == null or token == null)">
            AND m.USER_ID = #{userId}
        </if>
        <if test="token != null and (userId == null or passwd == null)">
            AND m.TOKEN = #{token}
        </if>
    </select>

    <!-- 로그인 성공 시 토큰 및 만료 시간 업데이트 -->
    <update id="updateToken">
        UPDATE MEMBERS
        SET TOKEN = #{token},
            TOKEN_VALIDITY = #{tokenValidity}
        WHERE USER_ID = #{userId}
    </update>

    <!-- 토큰 무효화 -->
    <update id="invalidateToken">
        UPDATE MEMBERS
        SET TOKEN = NULL,
            TOKEN_VALIDITY = NULL
        WHERE USER_ID = #{userId}
    </update>

    <!-- 사용자 목록 조회 -->
    <select id="getUserList" resultType="com.project.model.UserDto">
        SELECT
            m.USER_ID,
            m.PASSWD,
            m.USER_NAME,
            m.EMAIL,
            m.TEL,
            m.AGE,
            m.SIGNUP_DATE,
            m.TOKEN,
            m.TOKEN_VALIDITY,
            m.VIEW_ADULT,
            m.SAVE_HISTORY,
            m.TERMS,
            m.USER_TPCD,
            c1.COMMON_NAME AS USER_TPCD_NAME,
            m.LANG_TPCD,
            c2.COMMON_NAME AS LANG_TPCD_NAME,
            m.DATE_TPCD,
            c3.COMMON_NAME AS DATE_TPCD_NAME
        FROM MEMBERS m
        LEFT JOIN COMMON_CODE c1 ON m.USER_TPCD = c1.COMMON_VALUE AND c1.COMMON_CODE = 'USER_TPCD'
        LEFT JOIN COMMON_CODE c2 ON m.LANG_TPCD = c2.COMMON_VALUE AND c2.COMMON_CODE = 'LANG_TPCD'
        LEFT JOIN COMMON_CODE c3 ON m.DATE_TPCD = c3.COMMON_VALUE AND c3.COMMON_CODE = 'DATE_TPCD'
        <if test="userId != null">
            WHERE m.USER_ID = #{userId}
        </if>
    </select>

    <select id="getUserDetail" resultType="com.project.model.UserDto">
        SELECT
            m.USER_ID,
            m.PASSWD,
            m.USER_NAME,
            m.EMAIL,
            m.TEL,
            m.AGE,
            m.SIGNUP_DATE,
            m.TOKEN,
            m.TOKEN_VALIDITY,
            m.VIEW_ADULT,
            m.SAVE_HISTORY,
            m.TERMS,
            m.USER_TPCD,
            c1.COMMON_NAME as USER_TPCD_NAME,
            m.LANG_TPCD,
            c2.COMMON_NAME as LANG_TPCD_NAME,
            m.DATE_TPCD,
            c3.COMMON_NAME as DATE_TPCD_NAME
        FROM MEMBERS m
        LEFT JOIN COMMON_CODE c1
            ON m.USER_TPCD = c1.COMMON_VALUE AND c1.COMMON_CODE = 'USER_TPCD'
        LEFT JOIN COMMON_CODE c2
            ON m.LANG_TPCD = c2.COMMON_VALUE AND c2.COMMON_CODE = 'LANG_TPCD'
        LEFT JOIN COMMON_CODE c3
            ON m.DATE_TPCD = c3.COMMON_VALUE AND c3.COMMON_CODE = 'DATE_TPCD'
        WHERE m.USER_ID = #{userId}
    </select>

    <update id="resetUserPassword">
        UPDATE MEMBERS SET PASSWD = #{password} WHERE USER_ID = #{userId}
    </update>

    <update id="updateUserType">
        UPDATE MEMBERS SET USER_TPCD = #{type} WHERE USER_ID = #{userId}
    </update>
    <select id="checkId" resultType="int">
        SELECT COUNT(*) FROM MEMBERS WHERE USER_ID=#{id}
    </select>
    <select id="checkEmail" resultType="int">
        SELECT COUNT(*) FROM MEMBERS WHERE EMAIL=#{email}
    </select>
    <insert id="insertUser" parameterType="com.project.model.UserDto">
        INSERT MEMBERS 
        (USER_ID, PASSWD, USER_NAME, EMAIL, TEL, SIGNUP_DATE, 
        LANG_TPCD, DATE_TPCD, VIEW_ADULT, SAVE_HISTORY, TERMS, USER_TPCD)
        VALUES
        (#{userId}, #{passwd}, #{userName}, #{email}, "01088889999", DATE_FORMAT(now(), '%Y-%m-%d'), 
        '2','1','N','Y',"111",'1')
    </insert>
    <select id="selectIdbyEmail" resultType="String">
        SELECT USER_ID FROM MEMBERS WHERE EMAIL=#{email}
    </select>
    <select id="checkUserByIdEmail" resultType="int">
        SELECT COUNT(*) FROM MEMBERS WHERE EMAIL=#{email} and USER_ID=#{id}
    </select>
    <update id="updateUserTerms">
    UPDATE MEMBERS SET TERMS=#{terms} WHERE USER_ID=#{id}
    </update>

    <update id="updateUserSet">
    UPDATE MEMBERS SET VIEW_ADULT=#{adult}, LANG_TPCD=#{lang}, DATE_TPCD=#{dateformat}, SAVE_HISTORY=#{savehistory} WHERE USER_ID=#{id}
    </update>
  <update id="updateUser">
    UPDATE MEMBERS SET PASSWD=#{pwd}, EMAIL=#{email} WHERE USER_ID=#{id}
    </update>
    <select id="selectOrderList" resultType="OrderDto">
SELECT oh.ORDER_CODE, m.MOVIE_NAME, oh.PRICE, oh.ORDER_DATE, oh.CARD_NUM 
    FROM ORDER_HISTORY oh, MOVIE m 
    WHERE oh.USER_ID="user" and oh.MOVIE_CODE=m.MOVIE_CODE
    </select>
</mapper>
