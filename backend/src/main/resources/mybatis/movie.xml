<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.project.repository.MovieMapper">

  <select id="selectMovieList" resultType="com.project.model.MovieDto">
    SELECT
      m.MOVIE_CODE   AS movieCode,
      m.MOVIE_NAME   AS movieName,
      m.POSTER       AS poster,
      m.BACKGROUND   AS background,
      m.GENRE_CODEA  AS genreCodeA,
      m.SYNOPSIS     AS synopsis,
      m.DIRECT_CODEA AS directCodeA,
      m.DIRECT_CODEB AS directCodeB,
      m.ACTOR_CODEA  AS actorCodeA,
      m.ACTOR_CODEB  AS actorCodeB,
      m.ACTOR_CODEC  AS actorCodeC,
      v.PRICE        AS dvdPrice,
      v.DISCOUNT     AS dvdDiscount,
      m.TEASER       AS teaser,
      CASE WHEN rs.MOVIE_CODE IS NULL THEN 0 ELSE 1 END AS theater
    FROM MOVIE m
      LEFT JOIN VOD v ON v.MOVIE_CODE  = m.MOVIE_CODE
      LEFT JOIN (
          SELECT DISTINCT MOVIE_CODE
          FROM RUN_SCHEDULE
      ) rs ON rs.MOVIE_CODE = m.MOVIE_CODE

    <where>
      <!-- 장르 필터 -->
      <if test="genreTpcd != null and genreTpcd != ''">
        ( m.GENRE_CODEA = #{genreTpcd}
          OR m.GENRE_CODEB = #{genreTpcd}
          OR m.GENRE_CODEC = #{genreTpcd} )
      </if>

      <!-- 제목 검색 -->
      <if test="keyword != null and keyword != ''">
        AND m.MOVIE_NAME LIKE CONCAT('%', #{keyword}, '%')
      </if>

      <!-- 상영 스케줄 여부 -->
      <if test="schedule != null">
        AND (CASE WHEN rs.MOVIE_CODE IS NULL THEN 0 ELSE 1 END) = #{schedule}
      </if>
    </where>

    ORDER BY m.MOVIE_RELEASE DESC, m.MOVIE_CODE DESC
    LIMIT #{size} OFFSET #{offset}
  </select>

  <select id="countMovieList" resultType="int">
    SELECT COUNT(*)
    FROM MOVIE m
    LEFT JOIN (
      SELECT DISTINCT MOVIE_CODE
      FROM RUN_SCHEDULE
    ) rs ON rs.MOVIE_CODE = m.MOVIE_CODE

    <where>
      <if test="genreTpcd != null and genreTpcd != ''">
        ( m.GENRE_CODEA = #{genreTpcd}
          OR m.GENRE_CODEB = #{genreTpcd}
          OR m.GENRE_CODEC = #{genreTpcd} )
      </if>

      <if test="keyword != null and keyword != ''">
        AND m.MOVIE_NAME LIKE CONCAT('%', #{keyword}, '%')
      </if>

      <if test="schedule != null">
        AND (CASE WHEN rs.MOVIE_CODE IS NULL THEN 0 ELSE 1 END) = #{schedule}
      </if>
    </where>
  </select>

  <select id="selectMovieDetail" resultType="com.project.model.MovieDto">
    SELECT
      m.MOVIE_CODE as movieCode,
      m.MOVIE_NAME as movieName,
      m.POSTER as poster,
      m.BACKGROUND as background,
      m.GENRE_CODEA as genreCodeA,
      m.DIRECT_CODEA as directCodeA,
      m.DIRECT_CODEB as directCodeB,
      m.ACTOR_CODEA as actorCodeA,
      m.ACTOR_CODEB as actorCodeB,
      m.ACTOR_CODEC as actorCodeC,
      m.ACTOR_CODED as actorCodeD,
      m.ACTOR_CODEE as actorCodeE,
      m.SYNOPSIS as synopsis,
      m.RUNTIME as runtime,
      m.RATING_TPCD as ratingTpcd,
      m.TEASER as teaser,
      v.PRICE as dvdPrice,
      v.START_DATE as dvdDateFrom,
      v.END_DATE as dvdDateTo,
      v.DISCOUNT as dvdDiscount
    FROM MOVIE m
    LEFT JOIN VOD v ON m.MOVIE_CODE = v.MOVIE_CODE
    WHERE m.MOVIE_CODE = #{movieCode}
    LIMIT 1
  </select>

  <select id="selectGenreList" resultType="map">
    SELECT GENRE_CODE as code, GENRE_NAME as name FROM GENRE
  </select>

  <select id="selectCreatorList" resultType="map">
    SELECT CREATOR_CODE as code, CREATOR_NAME as name FROM CREATOR
  </select>

  <insert id="insertMovie" parameterType="com.project.model.MovieDto">
    INSERT INTO MOVIE (
      MOVIE_CODE, GENRE_CODEA, GENRE_CODEB, GENRE_CODEC,
      MOVIE_NAME, DIRECT_CODEA, DIRECT_CODEB,
      ACTOR_CODEA, ACTOR_CODEB, ACTOR_CODEC, ACTOR_CODED, ACTOR_CODEE,
      SYNOPSIS, RUNTIME, RATING_TPCD, MOVIE_RELEASE, TEASER, POSTER, BACKGROUND, SALES
    ) VALUES (
      #{movieCode}, #{genreCodeA}, #{genreCodeB}, #{genreCodeC},
      #{movieName}, #{directCodeA}, #{directCodeB},
      #{actorCodeA}, #{actorCodeB}, #{actorCodeC}, #{actorCodeD}, #{actorCodeE},
      #{synopsis}, #{runtime}, #{ratingTpcd}, #{movieRelease}, #{teaser}, #{poster}, #{background}, #{sales}
    )
  </insert>

  <insert id="insertVod">
    INSERT INTO VOD (MOVIE_CODE, PRICE, START_DATE, END_DATE, DISCOUNT)
    VALUES (#{movieCode}, #{price}, #{startDate}, #{endDate}, #{discount})
  </insert>

  <update id="updateMovie" parameterType="com.project.model.MovieDto">
    UPDATE MOVIE SET
      GENRE_CODEA = #{genreCodeA},
      GENRE_CODEB = #{genreCodeB},
      GENRE_CODEC = #{genreCodeC},
      MOVIE_NAME = #{movieName},
      DIRECT_CODEA = #{directCodeA},
      DIRECT_CODEB = #{directCodeB},
      ACTOR_CODEA = #{actorCodeA},
      ACTOR_CODEB = #{actorCodeB},
      ACTOR_CODEC = #{actorCodeC},
      ACTOR_CODED = #{actorCodeD},
      ACTOR_CODEE = #{actorCodeE},
      SYNOPSIS = #{synopsis},
      RUNTIME = #{runtime},
      RATING_TPCD = #{ratingTpcd},
      MOVIE_RELEASE = #{movieRelease},
      TEASER = #{teaser},
      POSTER = #{poster},
      BACKGROUND = #{background},
      SALES = #{sales}
    WHERE MOVIE_CODE = #{movieCode}
  </update>

  <update id="updateVod">
    UPDATE VOD SET
      PRICE = #{price},
      START_DATE = #{startDate},
      END_DATE = #{endDate},
      DISCOUNT = #{discount}
    WHERE MOVIE_CODE = #{movieCode}
  </update>

  <delete id="deleteOrderHistoryByMovieCode">
    DELETE FROM order_history WHERE MOVIE_CODE = #{movieCode}
  </delete>

  <delete id="deleteMovie">
    DELETE FROM MOVIE WHERE MOVIE_CODE = #{movieCode}
  </delete>

  <delete id="deleteWatchHistoryByMovieCode">
    DELETE FROM watch_history WHERE MOVIE_CODE = #{movieCode}
  </delete>

  <delete id="deleteVodByMovieCode">
    DELETE FROM vod WHERE MOVIE_CODE = #{movieCode}
  </delete>

  <select id = "selectUserVodList" resultType="com.project.model.VodDto">
  select mv.`POSTER` as poster, mv.`MOVIE_NAME` as movieName, mv.`SYNOPSIS`as synopsis, 
wh.`WATCH_DATE` as watchdate, wh.`WATCH_TIME` as watchtime, ca.`CREATOR_NAME` as directorA,
cb.`CREATOR_NAME` as actorA, cc.`CREATOR_NAME` as actorB, cd.`CREATOR_NAME` as actorC
from members m 
left join order_history oh on oh.`MOVIE_CODE`=`MOVIE_CODE`
left join movie mv on mv.`MOVIE_CODE`= oh.`MOVIE_CODE`
left join watch_history wh on m.`USER_ID`=wh.`USER_ID` and wh.`MOVIE_CODE`=mv.`MOVIE_CODE`
left join creator ca on mv.`DIRECT_CODEA`=ca.`CREATOR_CODE`
left join creator cb on mv.`ACTOR_CODEA`=cb.`CREATOR_CODE`
left join creator cc on mv.`ACTOR_CODEB`=cc.`CREATOR_CODE`
left join creator cd on mv.`ACTOR_CODEC`=cd.`CREATOR_CODE`
where m.`USER_ID`=#{id}
;
  </select>

  <insert id="insertRunSchedule" parameterType="map">
    INSERT INTO RUN_SCHEDULE
      (SCHEDULE_CODE, THEATER_CODE, MOVIE_CODE, RUN_DATE, START_TIME, END_TIME)
    VALUES
      (#{scheduleCode}, #{theaterCode}, #{movieCode}, #{runDate}, #{startTime}, #{endTime})
  </insert>

  <select id="selectRunScheduleList" resultType="map">
    SELECT
      SCHEDULE_CODE as scheduleCode,
      THEATER_CODE as theaterCode,
      MOVIE_CODE as movieCode,
      RUN_DATE as runDate,
      START_TIME as startTime,
      END_TIME as endTime
    FROM RUN_SCHEDULE
    <where>
      <if test="runDate != null">AND RUN_DATE = #{runDate}</if>
      <if test="theaterCode != null">AND THEATER_CODE = #{theaterCode}</if>
    </where>
    ORDER BY RUN_DATE DESC, START_TIME ASC
  </select>

  <!-- ========================= -->
  <!-- EXISTS: 중복 확인 쿼리 -->
  <!-- ========================= -->

  <select id="existsGenre" resultType="boolean">
      SELECT EXISTS (
          SELECT 1 FROM GENRE WHERE GENRE_CODE = #{genreCode}
      )
  </select>

  <select id="existsCreator" resultType="boolean">
      SELECT EXISTS (
          SELECT 1 FROM CREATOR WHERE CREATOR_CODE = #{creatorCode}
      )
  </select>

  <select id="existsMovie" resultType="boolean">
      SELECT EXISTS (
          SELECT 1 FROM MOVIE WHERE MOVIE_CODE = #{movieCode}
      )
  </select>

  <!-- ========================= -->
  <!-- INSERT: 데이터 삽입 쿼리 -->
  <!-- ========================= -->

  <insert id="batchInsertGenre">
      INSERT INTO GENRE (
          GENRE_CODE,
          GENRE_NAME
      ) VALUES (
          #{genreCode},
          #{genreName}
      )
  </insert>

  <insert id="batchInsertCreator">
      INSERT INTO CREATOR (
          CREATOR_CODE,
          CREATOR_NAME,
          GENDER
      ) VALUES (
          #{creatorCode},
          #{creatorName},
          #{gender}
      )
  </insert>

  <insert id="batchInsertMovie">
      INSERT INTO MOVIE (
          MOVIE_CODE,
          GENRE_CODEA,
          GENRE_CODEB,
          GENRE_CODEC,
          MOVIE_NAME,
          DIRECT_CODEA,
          DIRECT_CODEB,
          ACTOR_CODEA,
          ACTOR_CODEB,
          ACTOR_CODEC,
          ACTOR_CODED,
          ACTOR_CODEE,
          SYNOPSIS,
          RUNTIME,
          RATING_TPCD,
          MOVIE_RELEASE,
          TEASER,
          POSTER,
          BACKGROUND,
          SALES
      ) VALUES (
          #{movieCode},
          #{genreCodeA},
          #{genreCodeB},
          #{genreCodeC},
          #{movieName},
          #{directCodeA},
          #{directCodeB},
          #{actorCodeA},
          #{actorCodeB},
          #{actorCodeC},
          #{actorCodeD},
          #{actorCodeE},
          #{synopsis},
          #{runtime},
          #{ratingTpcd},
          #{movieRelease},
          #{teaser},
          #{poster},
          #{background},
          #{sales}
      )
  </insert>
</mapper>