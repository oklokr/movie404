<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.project.repository.MovieMapper">

  <select id="selectMovieList" resultType="com.project.model.MovieDto">
    SELECT
      m.MOVIE_CODE as movieCode,
      m.MOVIE_NAME as movieName,
      m.POSTER as poster,
      m.GENRE_CODEA as genreCodeA,
      m.SYNOPSIS as synopsis,
      m.DIRECT_CODEA as directCodeA,
      m.DIRECT_CODEB as directCodeB,
      m.ACTOR_CODEA as actorCodeA,
      m.ACTOR_CODEB as actorCodeB,
      m.ACTOR_CODEC as actorCodeC,
      v.PRICE as dvdPrice,
      v.DISCOUNT as dvdDiscount
    FROM MOVIE m
    LEFT JOIN VOD v ON m.MOVIE_CODE = v.MOVIE_CODE
    <where>
      <if test="movieName != null and movieName != ''">
        AND m.MOVIE_NAME LIKE CONCAT('%', #{movieName}, '%')
      </if>
    </where>
    GROUP BY m.MOVIE_CODE
    ORDER BY m.MOVIE_CODE DESC
    LIMIT #{size} OFFSET #{offset}
  </select>

  <select id="countMovieList" resultType="int">
    SELECT COUNT(*)
    FROM MOVIE m
    <where>
      <if test="movieName != null and movieName != ''">
        AND m.MOVIE_NAME LIKE CONCAT('%', #{movieName}, '%')
      </if>
    </where>
  </select>

  <select id="selectMovieDetail" resultType="com.project.model.MovieDto">
    SELECT
      m.MOVIE_CODE as movieCode,
      m.MOVIE_NAME as movieName,
      m.POSTER as poster,
      m.GENRE_CODEA as genreCodeA,
      m.DIRECT_CODEA as directCodeA,
      m.DIRECT_CODEB as directCodeB,
      m.ACTOR_CODEA as actorCodeA,
      m.ACTOR_CODEB as actorCodeB,
      m.ACTOR_CODEC as actorCodeC,
      m.ACTOR_CODED as actorCodeD,
      m.ACTOR_CODEE as actorCodeE,
      m.SYNOPSIS as synopsis,
      m.RUNTIME as runtime,
      m.RATING_TPCD as ratingTpcd,
      v.PRICE as dvdPrice,
      v.START_DATE as dvdDateFrom,
      v.END_DATE as dvdDateTo,
      v.DISCOUNT as dvdDiscount
    FROM MOVIE m
    LEFT JOIN VOD v ON m.MOVIE_CODE = v.MOVIE_CODE
    WHERE m.MOVIE_CODE = #{movieCode}
    LIMIT 1
  </select>

  <select id="selectGenreList" resultType="map">
    SELECT GENRE_CODE as code, GENRE_NAME as name FROM GENRE
  </select>

  <select id="selectCreatorList" resultType="map">
    SELECT CREATOR_CODE as code, CREATOR_NAME as name FROM CREATOR
  </select>

  <insert id="insertMovie" parameterType="com.project.model.MovieDto">
    INSERT INTO MOVIE (
      MOVIE_CODE, GENRE_CODEA, GENRE_CODEB, GENRE_CODEC,
      MOVIE_NAME, DIRECT_CODEA, DIRECT_CODEB,
      ACTOR_CODEA, ACTOR_CODEB, ACTOR_CODEC, ACTOR_CODED, ACTOR_CODEE,
      SYNOPSIS, RUNTIME, RATING_TPCD, MOVIE_RELEASE, POSTER, SALES
    ) VALUES (
      #{movieCode}, #{genreCodeA}, #{genreCodeB}, #{genreCodeC},
      #{movieName}, #{directCodeA}, #{directCodeB},
      #{actorCodeA}, #{actorCodeB}, #{actorCodeC}, #{actorCodeD}, #{actorCodeE},
      #{synopsis}, #{runtime}, #{ratingTpcd}, #{movieRelease}, #{poster}, #{sales}
    )
  </insert>

  <insert id="insertVod">
    INSERT INTO VOD (MOVIE_CODE, PRICE, START_DATE, END_DATE, DISCOUNT)
    VALUES (#{movieCode}, #{price}, #{startDate}, #{endDate}, #{discount})
  </insert>

  <update id="updateMovie" parameterType="com.project.model.MovieDto">
    UPDATE MOVIE SET
      GENRE_CODEA = #{genreCodeA},
      GENRE_CODEB = #{genreCodeB},
      GENRE_CODEC = #{genreCodeC},
      MOVIE_NAME = #{movieName},
      DIRECT_CODEA = #{directCodeA},
      DIRECT_CODEB = #{directCodeB},
      ACTOR_CODEA = #{actorCodeA},
      ACTOR_CODEB = #{actorCodeB},
      ACTOR_CODEC = #{actorCodeC},
      ACTOR_CODED = #{actorCodeD},
      ACTOR_CODEE = #{actorCodeE},
      SYNOPSIS = #{synopsis},
      RUNTIME = #{runtime},
      RATING_TPCD = #{ratingTpcd},
      MOVIE_RELEASE = #{movieRelease},
      POSTER = #{poster},
      SALES = #{sales}
    WHERE MOVIE_CODE = #{movieCode}
  </update>

  <update id="updateVod">
    UPDATE VOD SET
      PRICE = #{price},
      START_DATE = #{startDate},
      END_DATE = #{endDate},
      DISCOUNT = #{discount}
    WHERE MOVIE_CODE = #{movieCode}
  </update>

  <delete id="deleteOrderHistoryByMovieCode">
    DELETE FROM order_history WHERE MOVIE_CODE = #{movieCode}
  </delete>

  <delete id="deleteMovie">
    DELETE FROM MOVIE WHERE MOVIE_CODE = #{movieCode}
  </delete>

  <delete id="deleteWatchHistoryByMovieCode">
    DELETE FROM watch_history WHERE MOVIE_CODE = #{movieCode}
  </delete>

  <delete id="deleteVodByMovieCode">
    DELETE FROM vod WHERE MOVIE_CODE = #{movieCode}
  </delete>


  <select id = "selectUserVodList" resultType="com.project.model.VodDto">
  select mv.MOVIE_NAME, mv.POSTER
  from members m, order_history oh, movie mv
  where m.USER_ID=#{id}
  and oh.MOVIE_CODE=mv.MOVIE_CODE;
  </select>

  <insert id="insertRunSchedule" parameterType="map">
    INSERT INTO RUN_SCHEDULE
      (SCHEDULE_CODE, THEATER_CODE, MOVIE_CODE, RUN_DATE, START_TIME, END_TIME)
    VALUES
      (#{scheduleCode}, #{theaterCode}, #{movieCode}, #{runDate}, #{startTime}, #{endTime})
  </insert>

  <select id="selectRunScheduleList" resultType="map">
    SELECT
      SCHEDULE_CODE as scheduleCode,
      THEATER_CODE as theaterCode,
      MOVIE_CODE as movieCode,
      RUN_DATE as runDate,
      START_TIME as startTime,
      END_TIME as endTime
    FROM RUN_SCHEDULE
    <where>
      <if test="runDate != null">AND RUN_DATE = #{runDate}</if>
      <if test="theaterCode != null">AND THEATER_CODE = #{theaterCode}</if>
    </where>
    ORDER BY RUN_DATE DESC, START_TIME ASC
  </select>





  <!-- ========================= -->
    <!-- EXISTS: 중복 확인 쿼리 -->
    <!-- ========================= -->

    <select id="existsGenre" resultType="boolean">
        SELECT EXISTS (
            SELECT 1 FROM GENRE WHERE GENRE_CODE = #{genreCode}
        )
    </select>

    <select id="existsCreator" resultType="boolean">
        SELECT EXISTS (
            SELECT 1 FROM CREATOR WHERE CREATOR_CODE = #{creatorCode}
        )
    </select>

    <select id="existsMovie" resultType="boolean">
        SELECT EXISTS (
            SELECT 1 FROM MOVIE WHERE MOVIE_CODE = #{movieCode}
        )
    </select>

    <!-- ========================= -->
    <!-- INSERT: 데이터 삽입 쿼리 -->
    <!-- ========================= -->

    <insert id="batchInsertGenre">
        INSERT INTO GENRE (
            GENRE_CODE,
            GENRE_NAME
        ) VALUES (
            #{genreCode},
            #{genreName}
        )
    </insert>

    <insert id="batchInsertCreator">
        INSERT INTO CREATOR (
            CREATOR_CODE,
            CREATOR_NAME,
            GENDER
        ) VALUES (
            #{creatorCode},
            #{creatorName},
            #{gender}
        )
    </insert>

    <insert id="batchInsertMovie">
        INSERT INTO MOVIE (
            MOVIE_CODE,
            GENRE_CODEA,
            GENRE_CODEB,
            GENRE_CODEC,
            MOVIE_NAME,
            DIRECT_CODEA,
            DIRECT_CODEB,
            ACTOR_CODEA,
            ACTOR_CODEB,
            ACTOR_CODEC,
            ACTOR_CODED,
            ACTOR_CODEE,
            SYNOPSIS,
            RUNTIME,
            RATING_TPCD,
            MOVIE_RELEASE,
            TEASER,
            POSTER,
            SALES
        ) VALUES (
            #{movieCode},
            #{genreCodeA},
            #{genreCodeB},
            #{genreCodeC},
            #{movieName},
            #{directCodeA},
            #{directCodeB},
            #{actorCodeA},
            #{actorCodeB},
            #{actorCodeC},
            #{actorCodeD},
            #{actorCodeE},
            #{synopsis},
            #{runtime},
            #{ratingTpcd},
            #{movieRelease},
            #{teaser},
            #{poster},
            #{sales}
        )
    </insert>
</mapper>
