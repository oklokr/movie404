<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.project.repository.MovieMapper">

  <select id="selectMovieList" resultType="com.project.model.MovieDto">
    SELECT
      m.MOVIE_CODE as movieCode,
      m.MOVIE_NAME as movieName,
      m.POSTER as poster,
      v.PRICE as dvdPrice,
      v.DISCOUNT as dvdDiscount,
      MIN(s.PRICE) as reservePrice,
      MIN(s.DISCOUNT_PER) as reserveDiscount
    FROM MOVIE m
    LEFT JOIN VOD v ON m.MOVIE_CODE = v.MOVIE_CODE
    LEFT JOIN RUN_SCHEDULE rs ON rs.MOVIE_CODE = m.MOVIE_CODE
    LEFT JOIN SEAT s ON s.THEATER_CODE = rs.THEATER_CODE
    <where>
      <if test="movieName != null and movieName != ''">
        AND m.MOVIE_NAME LIKE CONCAT('%', #{movieName}, '%')
      </if>
    </where>
    GROUP BY m.MOVIE_CODE
    ORDER BY m.MOVIE_CODE DESC
    LIMIT #{size} OFFSET #{offset}
  </select>

  <select id="countMovieList" resultType="int">
    SELECT COUNT(*)
    FROM MOVIE m
    <where>
      <if test="movieName != null and movieName != ''">
        AND m.MOVIE_NAME LIKE CONCAT('%', #{movieName}, '%')
      </if>
    </where>
  </select>

  <select id="selectMovieDetail" resultType="com.project.model.MovieDto">
    SELECT
      m.MOVIE_CODE as movieCode,
      m.MOVIE_NAME as movieName,
      m.POSTER as poster,
      m.GENRE_CODEA as genreCodeA,
      m.DIRECT_CODEA as directCodeA,
      m.DIRECT_CODEB as directCodeB,
      m.ACTOR_CODEA as actorCodeA,
      m.ACTOR_CODEB as actorCodeB,
      m.ACTOR_CODEC as actorCodeC,
      m.ACTOR_CODED as actorCodeD,
      m.ACTOR_CODEE as actorCodeE,
      m.SYNOPSIS as synopsis,
      m.RUNTIME as runtime,
      m.RATING_TPCD as ratingTpcd,
      v.PRICE as dvdPrice,
      v.START_DATE as dvdDateFrom,
      v.END_DATE as dvdDateTo,
      v.DISCOUNT as dvdDiscount,
      s.PRICE as reservePrice,
      s.DISCOUNT_PER as reserveDiscount,
      rs.RUN_DATE as reserveDateFrom,
      rs.RUN_DATE as reserveDateTo
    FROM MOVIE m
    LEFT JOIN VOD v ON m.MOVIE_CODE = v.MOVIE_CODE
    LEFT JOIN RUN_SCHEDULE rs ON rs.MOVIE_CODE = m.MOVIE_CODE
    LEFT JOIN SEAT s ON s.THEATER_CODE = rs.THEATER_CODE
    WHERE m.MOVIE_CODE = #{movieCode}
    LIMIT 1
  </select>


  <select id="existsByMovieName" resultType="boolean">
    SELECT EXISTS (
      SELECT 1 FROM MOVIE WHERE MOVIE_NAME = #{movieName}
    )
  </select>

  <insert id="insertMovie">
    INSERT INTO MOVIE (
      MOVIE_CODE,
      GENRE_CODEA,
      MOVIE_NAME,
      DIRECT_CODEA,
      ACTOR_CODEA,
      SYNOPSIS,
      RUNTIME,
      RATING_TPCD,
      MOVIE_RELEASE,
      POSTER,
      SALES
    )
    VALUES (
      #{id},
      'GENRE001', -- 더미 장르
      #{title},
      'DIR001', -- 더미 감독
      'ACT001', -- 더미 배우
      #{overview},
      SEC_TO_TIME(#{runtime}),
      'TP001', -- 더미 등급
      #{releaseDate},
      #{posterPath},
      0
    )
  </insert>

  <select id="selectGenreList" resultType="map">
    SELECT GENRE_CODE as code, GENRE_NAME as name FROM GENRE
  </select>

  <delete id="deleteOrderHistoryByMovieCode">
    DELETE FROM order_history WHERE MOVIE_CODE = #{movieCode}
  </delete>

  <delete id="deleteMovie">
    DELETE FROM MOVIE WHERE MOVIE_CODE = #{movieCode}
  </delete>

  <delete id="deleteReservationByMovieCode">
    DELETE FROM reservation WHERE MOVIE_CODE = #{movieCode}
  </delete>

  <delete id="deleteRunScheduleByMovieCode">
    DELETE FROM run_schedule WHERE MOVIE_CODE = #{movieCode}
  </delete>

  <delete id="deleteWatchHistoryByMovieCode">
    DELETE FROM watch_history WHERE MOVIE_CODE = #{movieCode}
  </delete>

  <delete id="deleteVodByMovieCode">
    DELETE FROM vod WHERE MOVIE_CODE = #{movieCode}
  </delete>

  <insert id="insertMovie" parameterType="com.project.model.MovieDto">
    INSERT INTO MOVIE (
      MOVIE_CODE, GENRE_CODEA, GENRE_CODEB, GENRE_CODEC,
      MOVIE_NAME, DIRECT_CODEA, DIRECT_CODEB,
      ACTOR_CODEA, ACTOR_CODEB, ACTOR_CODEC, ACTOR_CODED, ACTOR_CODEE,
      SYNOPSIS, RUNTIME, RATING_TPCD, MOVIE_RELEASE, POSTER, SALES
    ) VALUES (
      #{movieCode}, #{genreCodeA}, #{genreCodeB}, #{genreCodeC},
      #{movieName}, #{directCodeA}, #{directCodeB},
      #{actorCodeA}, #{actorCodeB}, #{actorCodeC}, #{actorCodeD}, #{actorCodeE},
      #{synopsis}, #{runtime}, #{ratingTpcd}, #{movieRelease}, #{poster}, #{sales}
    )
  </insert>

  <insert id="insertVod">
    INSERT INTO VOD (MOVIE_CODE, PRICE, START_DATE, END_DATE, DISCOUNT)
    VALUES (#{movieCode}, #{price}, #{startDate}, #{endDate}, #{discount})
  </insert>

  <select id="selectCreatorList" resultType="map">
    SELECT CREATOR_CODE as code, CREATOR_NAME as name FROM CREATOR
  </select>

  <update id="updateMovie" parameterType="com.project.model.MovieDto">
    UPDATE MOVIE SET
      GENRE_CODEA = #{genreCodeA},
      GENRE_CODEB = #{genreCodeB},
      GENRE_CODEC = #{genreCodeC},
      MOVIE_NAME = #{movieName},
      DIRECT_CODEA = #{directCodeA},
      DIRECT_CODEB = #{directCodeB},
      ACTOR_CODEA = #{actorCodeA},
      ACTOR_CODEB = #{actorCodeB},
      ACTOR_CODEC = #{actorCodeC},
      ACTOR_CODED = #{actorCodeD},
      ACTOR_CODEE = #{actorCodeE},
      SYNOPSIS = #{synopsis},
      RUNTIME = #{runtime},
      RATING_TPCD = #{ratingTpcd},
      MOVIE_RELEASE = #{movieRelease},
      POSTER = #{poster},
      SALES = #{sales}
    WHERE MOVIE_CODE = #{movieCode}
  </update>

  <update id="updateVod">
    UPDATE VOD SET
      PRICE = #{price},
      START_DATE = #{startDate},
      END_DATE = #{endDate},
      DISCOUNT = #{discount}
    WHERE MOVIE_CODE = #{movieCode}
  </update>

  <update id="updateSeat" parameterType="map">
    UPDATE SEAT
    SET
      PRICE = #{price},
      DISCOUNT_PER = #{discount}
    WHERE SEAT_CODE = #{seatCode}
  </update>
</mapper>